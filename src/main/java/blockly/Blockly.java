package blockly;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Worker;
import javafx.scene.web.WebEngine;
import netscape.javascript.JSObject;


/**
 * Represents Blockly instance.
 * "interface" Blockly (JavaScript) <-> Main app (Java)
 */
public class Blockly {

    private final WebEngine webEngine;

    // takes webEngine to start blockly in
    public Blockly(WebEngine webEngine) throws IllegalArgumentException {
        if (webEngine == null) throw new IllegalArgumentException();
        this.webEngine = webEngine;
        this.webEngine.load(getClass().getResource("/google-blockly/index.html").toString());

        // enable communication JS -> Java
        webEngine.getLoadWorker().stateProperty().addListener(
                new ChangeListener() {
                    @Override
                    public void changed(ObservableValue observable, Object oldValue, Object newValue) {
                        if (newValue != Worker.State.SUCCEEDED) { return; }
                        JSObject window = (JSObject) webEngine.executeScript("window");
                        window.setMember("javaCall", new JavaCall());
                    }
                });
    }

    // communication JS -> Java, JS can call window.{methodOfThisClass}
    public static class JavaCall {
        public void workspaceChanged() {
            System.out.println("Workspace has changed.");
        }
    }

    // returns code generated by blockly
    public String getCode() {
        if (webEngine == null) return "ERROR: No webengine found.";
        return (String) webEngine.executeScript("Blockly.basicOttoGenerator.workspaceToCode(workspace)");
    }

    public String getWorkspace() throws NullPointerException{
        if (webEngine == null) throw new NullPointerException("No web engine.");
        return (String) webEngine.executeScript(
                "Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(Blockly.mainWorkspace))");
    }

    public void setWorkspace(String workspace) {
        clearWorkspace();
        webEngine.executeScript(
                "Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, Blockly.Xml.textToDom(\"" + workspace + "\"));");
    }

    public void clearWorkspace() {
        if (webEngine == null) throw new NullPointerException("No web engine.");
        webEngine.executeScript("Blockly.mainWorkspace.clear()");
    }

    public void setToolbox(String toolboxID) {
        if (webEngine == null) throw new NullPointerException("No web engine.");
        webEngine.executeScript("workspace.updateToolbox(" + toolboxID + ")");
    }

}
